1, Object oriented concepts

1. Object is a type of parameter which has its own attribute and methods
2. Class is a group of object with the same properties and methods
ex:
    class Person{
        public string name;
        public int age;
        public int getAge()
        {
            return age;
        }
    }
3. Instantiation of object (creating an object): is the method to create a new object of a class with its own attribute and method from the class
    Person John = new Person;
    John.name = "John";
    John.age = 25;
4. Visibility (public / private / protected)
+, public: attribute and method with public declaration in a class means that the attribute can be accessed (get or set) inside or outside of the class
+, private:  attribute and method with public declaration in a class means that the attribute can be accessed (get or set) inside of the class but can't be accessed from outside of the class
+, protected: attribute and method with public declaration in a class means that the attribute can be accessed (get or set) inside of the class and the inheritted class but can't be accessed from outside of the class
5. Member datas / methods: is the properties or method which is declared in the class and is set for the object from the class with different value
6. Inheritance: Inheritance class would inherit or use properties and method from the super class. If a method or attribute is changed or different from the super class it would be declared as super. 
The object from Inheritance class would also be object from the super class.
class Teacher extends Person{
        constructor(super)
        public string class_name;
    }
7. Interface
8. Polymorphism: One object can be acted in many forms or belong to many class. For example an object created from Teacher class can also act as Person class and also a Staff class.
9. Overriding: is a way to modify the method in an Inheritance class which has been declared form the original class. When this method is used by an object in the inheritance class it will run as the method has be re-writen in the inheritance one.
example
class Employee
{
    private string name;
    private int salary;
    public void setSalary(){
        this.salary = 3000;
    }
}
class Manager extends Employee
{
    private string name;
    private int salary;
    @Override
    public void setSalary(){
        this.salary = 5000;
    }
}

10. Abstract class: is a class that has virtual function inside the class. New object can not be create with this class. This class is used for inheritance. New object can only be created from the inheritance class.
example:
abstract class Animal{
    private string name;
    abstract void talk();
}
class Dog extends Animal{
    private string name;
    public void talk(){
        return "Gau Gau";
    }
}
Animal obj1 = new Animal // error
Dog dog = new Dog; //no error
dog.talk() // "Gau Gau"

2.More UI

3.Study Android fundamental concept
1. For android development you can use programming language like Java or Kotlin, C++. Other programming languages can be used are React Native.
2. .apk file is an Android package file that's used to distribute applications on Google's Android operating system. Apk files are saved in ZIP file format and can be downloaded directly to android device, via Google store or website.One APK file contains all the contents of an Android app and is the file that Android-powered devices use to install the app.
3. Each process has its own virtual machine (VM), so an app's code runs in isolation from other apps.By default, every app runs in its own Linux process. The Android system starts the process when any of the app's components need to be executed, and then shuts down the process when it's no longer needed or when the system must recover memory for other apps.
4. 4 components are 
+, activities : is the enrey point for interaction with the user. It represent a single screen with a user interface. For example, an email app can be separate into different activities: listing mail, reading mail, compose a mail.
+, Services: is a general-purpose entry point for keeping an app running in the background for all kinds of reasons. It is a component that runs in the background to perform long-running operations or to perform work for remote processes. A service does not provide a user interface. For example, a service might play music in the background while the user is in a different app, or it might fetch data over the network without blocking user interaction with an activity. Another component, such as an activity, can start the service and let it run or bind to it in order to interact with it. There are actually two very distinct semantics services tell the system about how to manage an app: Started services tell the system to keep them running until their work is completed. This could be to sync some data in the background or play music even after the user leaves the app. 
+, Broadcast receivers: A broadcast receiver is a component that enables the system to deliver events to the app outside of a regular user flow, allowing the app to respond to system-wide broadcast announcements. Because broadcast receivers are another well-defined entry into the app, the system can deliver broadcasts even to apps that aren't currently running. For example, the notification system of an app.
+, Content providers: A content provider manages a shared set of app data that you can store in the file system, in a SQLite database, on the web, or on any other persistent storage location that your app can access. Through the content provider, other apps can query or modify the data if the content provider allows it. For example, the Android system provides a content provider that manages the user's contact information.To the system, a content provider is an entry point into an app for publishing named data items, identified by a URI scheme. Thus an app can decide how it wants to map the data it contains to a URI namespace, handing out those URIs to other entities which can in turn use them to access the data. 
5. Manifest file is the root file of an android app which user must declare app components like: 
Identifies any user permissions the app requires, such as Internet access or read-access to the user's contacts.
Declares the minimum API Level required by the app, based on which APIs the app uses.
Declares hardware and software features used or required by the app, such as a camera, bluetooth services, or a multitouch screen.
Declares API libraries the app needs to be linked against (other than the Android framework APIs)
6. An Android app is composed of more than just codeâ€”it requires resources that are separate from the source code, such as images, audio files, and anything relating to the visual presentation of the app. For example, you can define animations, menus, styles, colors, and the layout of activity user interfaces with XML files. Using app resources makes it easy to update various characteristics of your app without modifying code. Providing sets of alternative resources enables you to optimize your app for a variety of device configurations, such as different languages and screen sizes. Providing sets of alternative resources enables you to optimize your app for a variety of device configurations, such as different languages and screen sizes.
